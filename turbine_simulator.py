import asyncio
import json
import random
import time
from datetime import datetime
from azure.iot.device.aio import IoTHubDeviceClient
from azure.iot.device import Message

TELEMETRY_MIN_INTERVAL = 6
TELEMETRY_MAX_INTERVAL = 56
MAX_VARIATION = 0.1  # 10% –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –≤–∞—Ä—ñ–∞—Ü—ñ—è –º—ñ–∂ –≤—ñ–¥–ª—ñ–∫–∞–º–∏

# –†–µ–∞–ª—ñ—Å—Ç–∏—á–Ω—ñ –¥—ñ–∞–ø–∞–∑–æ–Ω–∏ –¥–ª—è –µ–ª–µ–∫—Ç—Ä–∏—á–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
SENSOR_RANGES = {
    'output_power': {'min': 0, 'max': 15000, 'unit': 'kW', 'typical': 8000},
    'rotor_rpm': {'min': 0, 'max': 30, 'unit': 'RPM', 'typical': 15},
    'max_power_limit': {'min': 7000, 'max': 14000, 'unit': 'kW', 'typical': 12000},
    'voltage': {'min': 400, 'max': 690, 'unit': 'V', 'typical': 630},
    'current': {'min': 0, 'max': 5000, 'unit': 'A', 'typical': 2000},
    'power_factor': {'min': 0.80, 'max': 0.95, 'unit': '', 'typical': 0.90}
}

class TurbineSimulator:
    def __init__(self, turbine_id, connection_string):
        self.turbine_id = turbine_id
        self.connection_string = connection_string
        self.client = None
        self.previous_values = {}
        self.is_running = False
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –∑–Ω–∞—á–µ–Ω—å
        self._initialize_values()
    
    def _initialize_values(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å"""
        self.previous_values = {}
        for param, config in SENSOR_RANGES.items():
            # –ü–æ—á–∞—Ç–∫–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –±–ª–∏–∑—å–∫–æ –¥–æ —Ç–∏–ø–æ–≤–∏—Ö
            typical = config['typical']
            variation = typical * 0.2  # 20% –≤–∞—Ä—ñ–∞—Ü—ñ—è –≤—ñ–¥ —Ç–∏–ø–æ–≤–æ–≥–æ
            initial_value = random.uniform(typical - variation, typical + variation)
            
            # –û–±–º–µ–∂–µ–Ω–Ω—è –≤ –º–µ–∂–∞—Ö –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥—ñ–∞–ø–∞–∑–æ–Ω—É
            initial_value = max(config['min'], min(config['max'], initial_value))
            self.previous_values[param] = initial_value
    
    def generate_telemetry_data(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–∏—Ö —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö –∑ 10% –≤–∞—Ä—ñ–∞—Ü—ñ—î—é"""
        data = {
            'turbine_id': self.turbine_id,
            'timestamp': datetime.utcnow().isoformat() + 'Z'
        }
        
        # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–æ–∂–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –∑–Ω–∞—á–µ–Ω—å
        for param, config in SENSOR_RANGES.items():
            if param in self.previous_values:
                prev_value = self.previous_values[param]
                
                # 10% –≤–∞—Ä—ñ–∞—Ü—ñ—è –≤—ñ–¥ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è
                variation = prev_value * MAX_VARIATION
                min_val = max(config['min'], prev_value - variation)
                max_val = min(config['max'], prev_value + variation)
                
                new_value = random.uniform(min_val, max_val)
            else:
                # –Ø–∫—â–æ –Ω–µ–º–∞—î –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è, –≥–µ–Ω–µ—Ä—É—î–º–æ –Ω–æ–≤–µ
                new_value = random.uniform(config['min'], config['max'])
            
            # –û–∫—Ä—É–≥–ª–µ–Ω–Ω—è –¥–ª—è –∫—Ä–∞—â–æ–≥–æ –≤–∏–≥–ª—è–¥—É
            if param == 'power_factor':
                new_value = round(new_value, 3)
            elif param in ['output_power', 'max_power_limit', 'current']:
                new_value = round(new_value, 1)
            elif param in ['voltage']:
                new_value = round(new_value, 0)
            elif param == 'rotor_rpm':
                new_value = round(new_value, 2)
            
            data[param] = new_value
            self.previous_values[param] = new_value
        
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –¥–ª—è —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–æ—Å—Ç—ñ
        self._calculate_derived_parameters(data)
        
        return data
    
    def _calculate_derived_parameters(self, data):
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø–æ—Ö—ñ–¥–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –¥–ª—è —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–æ—Å—Ç—ñ"""
        # –°—Ç—Ä—É–º –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ –ø–æ—Ç—É–∂–Ω–æ—Å—Ç—ñ —Ç–∞ –Ω–∞–ø—Ä—É–≥–∏
        if data['output_power'] > 0 and data['voltage'] > 0:
            # P = U * I * cos(œÜ) * ‚àö3 (–¥–ª—è 3-—Ñ–∞–∑–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏)
            calculated_current = (data['output_power'] * 1000) / (data['voltage'] * data['power_factor'] * 1.732)
            
            # –ó–º—ñ—à—É—î–º–æ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∏–π —Å—Ç—Ä—É–º –∑ –≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–º –¥–ª—è —Ä–µ–∞–ª—ñ–∑–º—É
            data['current'] = round((data['current'] + calculated_current) / 2, 1)
            self.previous_values['current'] = data['current']
        
        # max_power_limit –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–∏–º –∑–∞ –ø–æ—Ç–æ—á–Ω—É –ø–æ—Ç—É–∂–Ω—ñ—Å—Ç—å
        if data['max_power_limit'] < data['output_power']:
            data['max_power_limit'] = data['output_power'] * random.uniform(1.1, 1.3)
            data['max_power_limit'] = round(data['max_power_limit'], 1)
            self.previous_values['max_power_limit'] = data['max_power_limit']
    
    async def connect(self):
        """–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ IoT Hub"""
        try:
            self.client = IoTHubDeviceClient.create_from_connection_string(self.connection_string)
            await self.client.connect()
            print(f" {self.turbine_id}: –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ IoT Hub")
            return True
        except Exception as e:
            print(f" {self.turbine_id}: –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: {e}")
            return False
    
    async def disconnect(self):
        """–í—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≤—ñ–¥ IoT Hub"""
        if self.client:
            await self.client.disconnect()
            print(f"üîå {self.turbine_id}: –í—ñ–¥–∫–ª—é—á–µ–Ω–æ –≤—ñ–¥ IoT Hub")
    
    async def send_telemetry(self, data):
        """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ç–µ–ª–µ–º–µ—Ç—Ä—ñ—ó –≤ IoT Hub"""
        try:
            message = Message(json.dumps(data))
            message.content_encoding = "utf-8"
            message.content_type = "application/json" # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î MQTT
            
            await self.client.send_message(message)
            print(f" {self.turbine_id}: –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ–ª–µ–º–µ—Ç—Ä—ñ—é - Power: {data['output_power']}kW, RPM: {data['rotor_rpm']}")
            return True
        except Exception as e:
            print(f" {self.turbine_id}: –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏: {e}")
            return False
    
    def get_next_interval(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É –ø–µ—Ä–µ–¥–∞—á—ñ"""
        return random.randint(TELEMETRY_MIN_INTERVAL, TELEMETRY_MAX_INTERVAL)
    
    async def run_simulation(self):
        """–ì–æ–ª–æ–≤–Ω–∏–π —Ü–∏–∫–ª —Å–∏–º—É–ª—è—Ü—ñ—ó"""
        if not await self.connect():
            return
        
        self.is_running = True
        print(f" {self.turbine_id}: –†–æ–∑–ø–æ—á–∞—Ç–æ —Å–∏–º—É–ª—è—Ü—ñ—é —Ç–µ–ª–µ–º–µ—Ç—Ä—ñ—ó")
        
        try:
            while self.is_running:
                # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ç–µ–ª–µ–º–µ—Ç—Ä—ñ—ó
                telemetry_data = self.generate_telemetry_data()
                await self.send_telemetry(telemetry_data)
                
                # –ß–µ–∫–∞–Ω–Ω—è –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –ø–µ—Ä–µ–¥–∞—á—ñ
                next_interval = self.get_next_interval()
                print(f" {self.turbine_id}: –ù–∞—Å—Ç—É–ø–Ω–∞ –ø–µ—Ä–µ–¥–∞—á–∞ —á–µ—Ä–µ–∑ {next_interval} —Å–µ–∫—É–Ω–¥")
                await asyncio.sleep(next_interval)
                
        except KeyboardInterrupt:
            print(f" {self.turbine_id}: –ó—É–ø–∏–Ω–∫–∞ —Å–∏–º—É–ª—è—Ü—ñ—ó...")
        except Exception as e:
            print(f" {self.turbine_id}: –ü–æ–º–∏–ª–∫–∞ —Å–∏–º—É–ª—è—Ü—ñ—ó: {e}")
        finally:
            self.is_running = False
            await self.disconnect()

async def run_multiple_turbines():
    """–ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü—ñ—ó –¥–ª—è –≤—Å—ñ—Ö —Ç—É—Ä–±—ñ–Ω"""
    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è connection strings
    try:
        with open('all_connections.json', 'r', encoding='utf-8') as f:
            connections = json.load(f)
    except FileNotFoundError:
        print(" –§–∞–π–ª all_connections.json –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–∏–º—É–ª—è—Ç–æ—Ä—ñ–≤ –¥–ª—è –≤—Å—ñ—Ö —Ç—É—Ä–±—ñ–Ω
    simulators = []
    for i in range(1, 8):  # TURBINE_001 –¥–æ TURBINE_007
        turbine_id = f"TURBINE_{str(i).zfill(3)}"
        if turbine_id in connections:
            simulator = TurbineSimulator(turbine_id, connections[turbine_id])
            simulators.append(simulator)
        else:
            print(f" Connection string –¥–ª—è {turbine_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    
    if not simulators:
        print(" –ñ–æ–¥–Ω–æ–≥–æ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ!")
        return
    
    print(f" –ó–∞–ø—É—Å–∫ {len(simulators)} —Å–∏–º—É–ª—è—Ç–æ—Ä—ñ–≤ —Ç—É—Ä–±—ñ–Ω...")
    print(" –ï–ª–µ–∫—Ç—Ä–∏—á–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏: output_power, rotor_rpm, max_power_limit, voltage, current, power_factor")
    print(" –Ü–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–¥–∞—á—ñ: 6-56 —Å–µ–∫—É–Ω–¥")
    print(" –í–∞—Ä—ñ–∞—Ü—ñ—è –º—ñ–∂ –≤—ñ–¥–ª—ñ–∫–∞–º–∏: ¬±10%")
    print("Ctrl+C –¥–ª—è –∑—É–ø–∏–Ω–∫–∏\n")
    
    # –ó–∞–ø—É—Å–∫ –≤—Å—ñ—Ö —Å–∏–º—É–ª—è—Ç–æ—Ä—ñ–≤ –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ
    tasks = [simulator.run_simulation() for simulator in simulators]
    
    try:
        await asyncio.gather(*tasks)
    except KeyboardInterrupt:
        print("\n –ó—É–ø–∏–Ω–∫–∞ –≤—Å—ñ—Ö —Å–∏–º—É–ª—è—Ç–æ—Ä—ñ–≤...")
        for simulator in simulators:
            simulator.is_running = False

if __name__ == "__main__":
    print(" –°–∏–º—É–ª—è—Ç–æ—Ä –≤—ñ—Ç—Ä–æ–≤–∏—Ö —Ç—É—Ä–±—ñ–Ω - –í–∞—Ä—ñ–∞–Ω—Ç 3: –ï–ª–µ–∫—Ç—Ä–∏—á–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏")
    print("=" * 70)
    asyncio.run(run_multiple_turbines())